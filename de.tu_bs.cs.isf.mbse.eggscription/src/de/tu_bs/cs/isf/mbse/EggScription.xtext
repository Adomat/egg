// automatically generated by Xtext
grammar de.tu_bs.cs.isf.mbse.egg.EggScription with org.eclipse.xtext.common.Terminals

import "platform:/resource/de.tu_bs.cs.isf.mbse.egg/models/descriptions.ecore#//gui" as gui
import "platform:/resource/de.tu_bs.cs.isf.mbse.egg/models/descriptions.ecore#//attributes/block" as block
import "platform:/resource/de.tu_bs.cs.isf.mbse.egg/models/descriptions.ecore#//attributes/item" as item
import "platform:/resource/de.tu_bs.cs.isf.mbse.egg/models/descriptions.ecore#//attributes/character" as character
import "platform:/resource/de.tu_bs.cs.isf.mbse.egg/models/descriptions.ecore#//attributes/gui" as guiattr
import "platform:/resource/de.tu_bs.cs.isf.mbse.egg/models/descriptions.ecore#//auxiliary" as auxiliary
import "platform:/resource/de.tu_bs.cs.isf.mbse.egg/models/descriptions.ecore" as descriptions
import "platform:/resource/de.tu_bs.cs.isf.mbse.egg/models/descriptions.ecore#//gameelements" as gameelements
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DescriptionRoot returns descriptions::DescriptionRoot:
	{descriptions::DescriptionRoot}
	(descriptions+=Description)*
;

Description returns descriptions::Description:
	MenuPageDescription 
	| TextPageDescription 
	| BlockDescription 
	| ItemDescription 
	| HeroDescription 
	| EnemyDescription
;

//#######################################################################################################
//## MENUS ##############################################################################################
//#######################################################################################################

MenuPageDescription returns gui::MenuPageDescription:
	{gui::MenuPageDescription}
	'MenuPageDescription'
	name=EString
	'{'
		(properties += MenuPageAttribute ';')*
	'}'
;

TextPageDescription returns gui::TextPageDescription:
	{gui::TextPageDescription}
	'TextPageDescription'
	name=EString
	'{'
		(properties += TextPageAttribute ';')*
	'}'
;

MenuPageAttribute returns guiattr::MenuPageAttribute:
	Logo | Title | BackgroundImage | BackgroundColor | Button | StartPage
;

TextPageAttribute returns guiattr::TextPageAttribute:
	NextPage | Title | Text | BackgroundImage | BackgroundColor | StartPage
;

StartPage returns guiattr::StartPage:
	{guiattr::StartPage}
	(value ?= 'startPage')
;

Logo returns guiattr::Logo:
	{guiattr::Logo}
	('logo' animation = AnimationDescription)
;

Title returns guiattr::Title:
	{guiattr::Title}
	('title' value = EString)
;

BackgroundImage returns guiattr::BackgroundImage:
	{guiattr::BackgroundImage}
	('backgroundImage' '<' value = EString '>')
;

BackgroundColor returns guiattr::BackgroundColor:
	{guiattr::BackgroundColor}
	('backgroundColor' '#' value = EString)
;

Text returns guiattr::Text:
	{guiattr::Text}
	('paragraph' value += EString)
;

Button returns guiattr::Button:
	{guiattr::Button}
	('button' label = EString 'to' page = [gui::PageDescription|EString])
;

NextPage returns guiattr::NextPage:
	{guiattr::NextPage}
	('next' value = [gui::PageDescription|EString])
;

//#######################################################################################################
//## BLOCKS #############################################################################################
//#######################################################################################################

BlockDescription returns gameelements::BlockDescription:
	{gameelements::BlockDescription}
	'Block'
	name=EString
	'{'
		(properties += BlockAttribute ';')*
	'}'
;

BlockAttribute returns block::BlockAttribute:
	Destroyable | Movable | NoCollision | AnimationDescription
;

Destroyable returns block::Destroyable:
	{block::Destroyable}
	(value ?= 'destroyable')
;

NoCollision returns block::NoCollision:
	{block::NoCollision}
	(value ?= 'noCollision')
;

Movable returns block::Movable:
	{block::Movable}
	(value ?= 'movable')
;

//#######################################################################################################
//## ITEMS ##############################################################################################
//#######################################################################################################

ItemDescription returns gameelements::ItemDescription:
	{gameelements::ItemDescription}
	'Item'
	name=EString
	'{'
		(properties += ItemAttribute ';')*
	'}'
;

ItemAttribute returns item::ItemAttribute:
	Consumable | Usable | ScorePoints | AnimationDescription | Effect
;

Effect returns item::Effect:
	{item::Effect}
	('effect' type = OCPROPS value = WHOLEINT)
;

Consumable returns item::Consumable:
	{item::Consumable}
	(value ?= 'consumable')
;

Usable returns item::Usable:
	{item::Usable}
	(value ?= 'usable')
;

ScorePoints returns item::ScorePoints:
	{item::ScorePoints}
	('scorePoints' value = INT)
;

//#######################################################################################################
//## CHARACTERS #########################################################################################
//#######################################################################################################

HeroDescription returns gameelements::HeroDescription:
	{gameelements::HeroDescription}
	'Hero'
	name=EString
	'{'
		(properties += HeroAttribute ';')*
	'}'
;

HeroAttribute returns character::HeroAttribute:
	Speed | JumpPower | MaxLife | Strength | InventorySize | CanKillInDistance
	| IdleAnimation | RunAnimation | JumpAnimation | CloseAttackAnimation | DistanceAttackAnimation 
	| InventoryItemsTypes | InventoryItemsCounts
;

EnemyDescription returns gameelements::EnemyDescription:
	{gameelements::EnemyDescription}
	'Enemy'
	name=EString
	'{'
		(properties += EnemyAttribute ';')*
	'}'
;

EnemyAttribute returns character::EnemyAttribute:
	Speed | JumpPower | MaxLife | Strength | IntelligenceLevel | CanKillInDistance
	| IdleAnimation | RunAnimation | JumpAnimation | CloseAttackAnimation | DistanceAttackAnimation 
;

IntelligenceLevel returns character::IntelligenceLevel:
	{character::IntelligenceLevel}
	('iq' value = IQ)
;

Speed returns character::Speed:
	{character::Speed}
	('speed' value = INT)
;

JumpPower returns character::JumpPower:
	{character::JumpPower}
	('jumpPower' value = INT)
;

MaxLife returns character::MaxLife:
	{character::MaxLife}
	('maxLife' value = INT)
;

Strength returns character::Strength:
	{character::Strength}
	('strength' value = INT)
;

InventorySize returns character::InventorySize:
	{character::InventorySize}
	('inventorySize' value = INT)
;

IdleAnimation returns character::IdleAnimation:
	{character::IdleAnimation}
	('idle' value = AnimationDescription)
;

RunAnimation returns character::RunAnimation:
	{character::RunAnimation}
	('run' value = AnimationDescription)
;

JumpAnimation returns character::JumpAnimation:
	{character::JumpAnimation}
	('jump' value = AnimationDescription)
;

CloseAttackAnimation returns character::MeleeAttackAnimation:
	{character::MeleeAttackAnimation}
	('melee' value = AnimationDescription)
;

DistanceAttackAnimation returns character::RangeAttackAnimation:
	{character::RangeAttackAnimation}
	('range' value = AnimationDescription)
;

InventoryItemsTypes returns character::InventoryItemsTypes:
	{character::InventoryItemsTypes}
	'inventoryItemTypes' value += [gameelements::ItemDescription|EString] (',' value += [gameelements::ItemDescription|EString])*
;

InventoryItemsCounts returns character::InventoryItemsCounts:
	{character::InventoryItemsCounts}
	'inventoryItemCounts' value += INT (',' value += INT)*
;

CanKillInDistance returns character::RangeAttackEnabled:
	{character::RangeAttackEnabled}
	(value ?= 'rangeAttackEnabled')
;

//#######################################################################################################
//## AUXILIARY ##########################################################################################
//#######################################################################################################

AnimationDescription returns auxiliary::AnimationDescription:
	{auxiliary::AnimationDescription}
	'Animation'
	'{'
		(properties += AnimationAttribute ';')*
	'}'
;

AnimationAttribute returns auxiliary::AnimationAttribute:
	Pictures | Duration
;

Duration returns auxiliary::Duration:
	{auxiliary::Duration}
	('duration' value = INT)
;

Pictures returns auxiliary::Pictures:
	{auxiliary::Pictures}
	('pictures' value += EString (',' value += EString )*)
;

//#######################################################################################################
//## TERMINALS ETC ######################################################################################
//#######################################################################################################

EString returns ecore::EString:
	STRING | ID;

WHOLEINT returns ecore::EInt:
	('-'|'+') INT
;

terminal PICTURESTRING returns ecore::EString:
	'<'(.)+('.jpg'|'.JPG'|'.JPEG'|'.png'|'.PNG')'>'
;

enum IQ returns character::Intelligence:
//	HIGH = 'high' | MEDIUM = 'medium' | LOW = 'low' |
	HIGH = 'HIGH' | MEDIUM = 'MEDIUM' | LOW = 'LOW' //|
//	HIGH = 'H' | MEDIUM = 'M' | LOW = 'L' |
//	HIGH = 'h' | MEDIUM = 'm' | LOW = 'l'
;

enum OCPROPS returns character::DynamicOCProperties:
	STRENGTH = 'strength' | SPEED = 'speed' | JUMPPOWER = 'jumpPower' | MAXLIFE = 'maxLife' | INVENTORYSIZE = 'inventorySize' |
	STRENGTH = 'STRENGTH' | SPEED = 'SPEED' | JUMPPOWER = 'JUMPPOWER' | MAXLIFE = 'MAXLIFE' | INVENTORYSIZE = 'INVENTORYSIZE' 
;

